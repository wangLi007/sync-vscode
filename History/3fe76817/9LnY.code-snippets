{
  // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Print to console": {
    "scope": "javascript,typescript,css,vue,less,scss",
    "prefix": "ellipsis",
    "body": [
      "display: -webkit-box; /** 将对象作为伸缩盒子模型显示 **/",
      "-webkit-box-orient: vertical; /** 设置或检索伸缩盒对象的子元素的排列方式 **/",
      "-webkit-line-clamp: 2; /** 显示的行数 **/",
      "overflow: hidden; /** 隐藏超出的内容 **/"
    ],
    "description": "es"
  },
  "滚动条动画": {
    "scope": "javascript,typescript,vue",
    "prefix": "scrollAnimation",
    "body": [
      // 切换tab  动画
      "scrollAnimation(targetY) {",
      "const activeY =",
      "document.documentElement.scrollTop || document.body.scrollTop;",
      "const clientHeight =",
      "document.documentElement.clientHeight ||",
      "document.body.clientHeight;",
      "const scrollHeight =",
      "document.documentElement.scrollHeight ||",
      "document.body.scrollHeight;",
      "const marginBot = scrollHeight - activeY - clientHeight;",
      "const needScrollTop = targetY - activeY;",
      "let _activeY = activeY;",
      "setTimeout(() => {",
      "const dist = Math.ceil(needScrollTop / 10);",
      "_activeY += dist;",
      "if (needScrollTop > 10 || needScrollTop < -10) {",
      "window.scrollTo(0, _activeY);",
      "if (marginBot > 0) {",
      "this.scrollAnimation(targetY);",
      "} else {",
      "this.goTarget(targetY);  window.srollTo(0,100)",
      "}",
      "} else {",
      "this.goTarget(targetY);",
      "}",
      "}, 3);",
      "},"
    ],
    "description": "滚动条动画封装"
  },
  "快捷输入promise": {
    "scope": "javascript,typescript,css,vue,less,scss",
    "prefix": "promise",
    "body": [
      "return new Promise((reslove, reject) => {",
        "\tthis.nodeObj.then((res) => {",
            "\treslove(res.toString());",
        "})",
        ".catch((err) => reject(err));",
      "});"
    ]
  }
}
